<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:hd="clr-namespace:DlhSoft.Windows.Controls;assembly=DlhSoft.HierarchicalData.LightWPF.Controls"
                    xmlns:local="clr-namespace:DlhSoft.Windows.Controls"
                    xmlns:converters="clr-namespace:DlhSoft.Windows.Converters"                       
                    xmlns:shapes="clr-namespace:DlhSoft.Windows.Shapes">
    <converters:DateTimeStringConverter x:Key="DateTimeStringConverter"/>
    <converters:DurationStringConverter x:Key="DurationStringConverter"/>
    <converters:NumberStringConverter x:Key="NumberStringConverter"/>
    <converters:FinishDateConverter x:Key="FinishDateConverter"/>
    <DataTemplate x:Key="ScaleHeaderContentTemplate">
        <ContentControl Content="{Binding}" HorizontalContentAlignment="Left" VerticalContentAlignment="Center" Margin="2" IsTabStop="False"/>
    </DataTemplate>
    <Color x:Key="ControlMouseOverColor">#FF3843C4</Color>
    <Color x:Key="ControlPressedColor">#FF211AA9</Color>
    <Color x:Key="BorderLightColor">#FF888888</Color>
    <Color x:Key="BorderDarkColor">#FF444444</Color>
    <Color x:Key="GlyphColor">#FF444444</Color>
    <ControlTemplate x:Key="UpdateTimelinePageButtonTemplate" TargetType="Button">
        <Border x:Name="Border" Margin="0,1,1,1" CornerRadius="1" BorderThickness="1">
            <Border.BorderBrush>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <LinearGradientBrush.GradientStops>
                        <GradientStopCollection>
                            <GradientStop Color="{DynamicResource BorderLightColor}" Offset="0.0" />
                            <GradientStop Color="{DynamicResource BorderDarkColor}" Offset="1.0" />
                        </GradientStopCollection>
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
            </Border.BorderBrush>
            <Border.Background>
                <LinearGradientBrush EndPoint="0.5,0" StartPoint="0.5,1">
                    <GradientStop Color="{DynamicResource ControlLightColor}" Offset="0" />
                    <GradientStop Color="{DynamicResource ControlMediumColor}" Offset="1" />
                </LinearGradientBrush>
            </Border.Background>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal"/>
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)" Storyboard.TargetName="Border">
                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ControlMouseOverColor}"/>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)" Storyboard.TargetName="Border">
                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ControlPressedColor}"/>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}">
                <Path.Fill>
                    <SolidColorBrush Color="{DynamicResource GlyphColor}"/>
                </Path.Fill>
            </Path>
        </Border>
    </ControlTemplate>
    <Style TargetType="local:GanttChartView">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Background" Value="#FFFFFFFF"/>
        <Setter Property="Foreground" Value="#FF000000"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FFA3AEB9" Offset="0"/>
                    <GradientStop Color="#FF8399A9" Offset="0.375"/>
                    <GradientStop Color="#FF718597" Offset="0.375"/>
                    <GradientStop Color="#FF617584" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="HeaderHeight" Value="40"/>
        <Setter Property="HeaderBackground" Value="#f4f5f7"/>
        <Setter Property="UnassignedScheduleChartItemBackground" Value="#80e0e0e0"/>
        <Setter Property="ScaleHeaderHeight" Value="20"/>
        <Setter Property="NonworkingTimeBackground" Value="#f8f8f8"/>
        <Setter Property="CurrentTimeLineStroke" Value="#808080"/>
        <Setter Property="ItemHeight" Value="21"/>
        <Setter Property="BarHeight" Value="14"/>
        <Setter Property="CompletedBarHeight" Value="4"/>
        <Setter Property="StandardBarFill">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                    <LinearGradientBrush.GradientStops>
                        <GradientStop Color="Transparent" Offset="0"/>
                        <GradientStop Color="LightBlue" Offset="0.25"/>
                        <GradientStop Color="Blue" Offset="1"/>
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="StandardBarStroke" Value="Blue"/>
        <Setter Property="StandardBarStrokeThickness" Value="1"/>
        <Setter Property="StandardBarCornerRadius" Value="4"/>
        <Setter Property="StandardCompletedBarFill">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                    <LinearGradientBrush.GradientStops>
                        <GradientStop Color="Transparent" Offset="0"/>
                        <GradientStop Color="Black" Offset="0.15"/>
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="StandardCompletedBarStroke" Value="Black"/>
        <Setter Property="StandardCompletedBarStrokeThickness" Value="1"/>
        <Setter Property="StandardCompletedBarCornerRadius" Value="2"/>
        <Setter Property="SummaryBarFill">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                    <LinearGradientBrush.GradientStops>
                        <GradientStop Color="Black" Offset="0"/>
                        <GradientStop Color="Transparent" Offset="0.1"/>
                        <GradientStop Color="Gray" Offset="0.2"/>
                        <GradientStop Color="Black" Offset="0.6"/>
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="SummaryBarStroke" Value="Black"/>
        <Setter Property="SummaryBarStrokeThickness" Value="1"/>
        <Setter Property="MilestoneBarFill">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                    <LinearGradientBrush.GradientStops>
                        <GradientStop Color="Black" Offset="0"/>
                        <GradientStop Color="Transparent" Offset="0.1"/>
                        <GradientStop Color="Gray" Offset="0.2"/>
                        <GradientStop Color="Black" Offset="0.6"/>
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="MilestoneBarStroke" Value="Black"/>
        <Setter Property="MilestoneBarStrokeThickness" Value="1"/>
        <Setter Property="DependencyLineStroke" Value="Blue"/>
        <Setter Property="DependencyLineStrokeThickness" Value="1"/>
        <Setter Property="StandardTaskTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <Canvas Opacity="0.5" Visibility="{Binding GanttChartView.BaselineVisibility}">
                            <Rectangle Canvas.Left="{Binding ComputedBaselineBarLeft}" Canvas.Top="-4" Width="{Binding ComputedBaselineBarWidth}" Height="{Binding ComputedBarHeight}"
                                       Fill="Transparent" Stroke="{Binding Path=(local:GanttChartView.StandardBarStroke)}" StrokeThickness="{Binding GanttChartView.StandardBarStrokeThickness}" RadiusX="{Binding GanttChartView.StandardBarCornerRadius}" RadiusY="{Binding GanttChartView.StandardBarCornerRadius}" StrokeDashArray="2,2"/>
                        </Canvas>
                        <Grid>
                            <Rectangle Fill="{Binding Path=(local:GanttChartView.StandardBarFill)}" Stroke="{Binding Path=(local:GanttChartView.StandardBarStroke)}" StrokeThickness="{Binding GanttChartView.StandardBarStrokeThickness}" RadiusX="{Binding GanttChartView.StandardBarCornerRadius}" RadiusY="{Binding GanttChartView.StandardBarCornerRadius}"/>
                            <local:DragTaskThumb Role="UpdateStart" Visibility="{Binding GanttChartView.ThumbVisibility}" IsEnabled="{Binding GanttChartView.IsTaskStartThumbEnabled}" IsHitTestVisible="{Binding IsBarThumbHitTestVisible}"/>
                            <local:DragTaskThumb Role="UpdateFinish" Width="2" HorizontalAlignment="Right" Visibility="{Binding GanttChartView.ThumbVisibility}" IsEnabled="{Binding GanttChartView.IsTaskFinishThumbEnabled}" IsHitTestVisible="{Binding IsBarThumbHitTestVisible}"/>
                            <local:DragTaskThumb Role="UpdateStartOnly" Width="2" Margin="-2,0,0,0" HorizontalAlignment="Left" Visibility="{Binding GanttChartView.ThumbVisibility}" IsEnabled="{Binding GanttChartView.IsTaskStartOnlyThumbEnabled}" IsHitTestVisible="{Binding IsBarThumbHitTestVisible}"/>
                        </Grid>
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Center" Visibility="{Binding GanttChartView.TaskCompletedEffortVisibility}">
                            <Rectangle Width="{Binding ComputedCompletedBarWidth}" Height="{Binding GanttChartView.CompletedBarHeight}" VerticalAlignment="Center" Fill="{Binding Path=(local:GanttChartView.StandardCompletedBarFill)}" Stroke="{Binding Path=(local:GanttChartView.StandardCompletedBarStroke)}" StrokeThickness="{Binding GanttChartView.StandardCompletedBarStrokeThickness}" RadiusX="{Binding GanttChartView.StandardCompletedBarCornerRadius}" RadiusY="{Binding GanttChartView.StandardCompletedBarCornerRadius}" IsHitTestVisible="False"/>
                            <local:DragTaskThumb Role="UpdateCompletedFinish" Width="2" Height="{Binding GanttChartView.BarHeight}" Visibility="{Binding GanttChartView.ThumbVisibility}" IsEnabled="{Binding GanttChartView.IsTaskCompletionThumbEnabled}" IsHitTestVisible="{Binding IsBarThumbHitTestVisible}" ToolTip="{Binding Completion, Converter={StaticResource NumberStringConverter}, ConverterParameter=0.##%}"/>
                        </StackPanel>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="SummaryTaskTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="0.2*"/>
                                <RowDefinition Height="0.5*"/>
                                <RowDefinition Height="0.3*"/>
                            </Grid.RowDefinitions>
                            <Rectangle Grid.Column="1" Grid.Row="1" Fill="{Binding Path=(local:GanttChartView.SummaryBarFill)}" Stroke="{Binding Path=(local:GanttChartView.SummaryBarStroke)}" StrokeThickness="{Binding GanttChartView.SummaryBarStrokeThickness}"/>
                            <Line Grid.Column="1" Grid.Row="2" Stroke="{Binding Path=(local:GanttChartView.StandardBarStroke)}" StrokeThickness="1" StrokeDashArray="1,1" Y1="1" Y2="1" X1="0" X2="{Binding ComputedBarWidth}" Visibility="{Binding ExpansionVisibility}"/>
                            <Polygon Grid.Column="0" Grid.Row="1" Grid.RowSpan="2" Fill="{Binding Path=(local:GanttChartView.SummaryBarFill)}" Stroke="{Binding Path=(local:GanttChartView.SummaryBarStroke)}" StrokeThickness="{Binding GanttChartView.SummaryBarStrokeThickness}" Width="{Binding GanttChartView.BarHeight}" Stretch="Fill"
                                     Points="0,0 0,0.5 0.5,0.8 1,0.5 1,0"/>
                            <Polygon Grid.Column="3" Grid.Row="1" Grid.RowSpan="2" Fill="{Binding Path=(local:GanttChartView.SummaryBarFill)}" Stroke="{Binding Path=(local:GanttChartView.SummaryBarStroke)}" StrokeThickness="{Binding GanttChartView.SummaryBarStrokeThickness}" Width="{Binding GanttChartView.BarHeight}" Stretch="Fill"
                                     Points="1,0 1,0.5 0.5,0.8 0,0.5 0,0"/>
                        </Grid>
                        <local:TaskExpander/>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="MilestoneTaskTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <Canvas Opacity="0.5" Visibility="{Binding GanttChartView.BaselineVisibility}">
                            <Polygon Canvas.Left="{Binding ComputedBaselineBarLeft}" Width="{Binding ComputedBarHeight}" Height="{Binding ComputedBarHeight}"
                                     Fill="Transparent" Stroke="{Binding Path=(local:GanttChartView.MilestoneBarStroke)}" StrokeThickness="{Binding GanttChartView.MilestoneBarStrokeThickness}" StrokeDashArray="2,2" Stretch="UniformToFill"
                                     Points="0.5,0 1,0.5 0.5,1 0,0.5"/>
                        </Canvas>
                        <Polygon Fill="{Binding Path=(local:GanttChartView.MilestoneBarFill)}" Stroke="{Binding Path=(local:GanttChartView.MilestoneBarStroke)}" StrokeThickness="{Binding GanttChartView.MilestoneBarStrokeThickness}" Stretch="UniformToFill"
                                 Points="0.5,0 1,0.5 0.5,1 0,0.5"/>
                        <local:DragTaskThumb Role="UpdateStart" Visibility="{Binding GanttChartView.ThumbVisibility}" IsEnabled="{Binding GanttChartView.IsTaskStartThumbEnabled}" IsHitTestVisible="{Binding IsBarThumbHitTestVisible}"/>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ToolTipTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl Content="{Binding Content}" IsTabStop="False"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="AssignmentsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl Content="{Binding AssignmentsContent}" IsHitTestVisible="False" IsTabStop="False"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="DependencyLineTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <ToolTipService.ToolTip>
                            <ToolTip Content="{Binding}" ContentTemplate="{Binding GanttChartView.PredecessorToolTipTemplate}" Visibility="{Binding GanttChartView.DependencyToolTipVisibility}"/>
                        </ToolTipService.ToolTip>
                        <shapes:DependencyArrowLine Stroke="Transparent" StrokeThickness="3" Points="{Binding ComputedDependencyLinePoints}"/>
                        <shapes:DependencyArrowLine x:Name="DependencyArrowLine" Stroke="{Binding Path=(local:GanttChartView.DependencyLineStroke)}" StrokeThickness="{Binding GanttChartView.DependencyLineStrokeThickness}" Points="{Binding ComputedDependencyLinePoints}"/>
                    </Grid>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(local:GanttChartView.DependencyLineStroke)}" Value="{x:Null}">
                            <Setter TargetName="DependencyArrowLine" Property="Stroke" Value="{Binding Path=DependentItem.(local:GanttChartView.DependencyLineStroke)}"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="PredecessorToolTipTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <ContentControl Content="{Binding Item.Content}" VerticalAlignment="Center" IsTabStop="False"/>
                        <TextBlock Text="-" Margin="1,0" VerticalAlignment="Center"/>
                        <ContentControl Content="{Binding DependentItem.Content}" VerticalAlignment="Center" IsTabStop="False"/>
                    </StackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:TaskPresenter Visibility="{Binding BarVisibility}" IsVirtuallyVisible="{Binding IsVirtuallyVisible}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <Canvas IsItemsHost="True"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="Scales">
            <Setter.Value>
                <local:ScaleCollection>
                    <local:Scale ScaleType="Weeks" HeaderBorderBrush="Silver" HeaderBorderThickness="0,0,1,1" HeaderContentTemplate="{StaticResource ScaleHeaderContentTemplate}" BorderBrush="Silver" BorderThickness="0,0,1,0"/>
                    <local:Scale ScaleType="Days" HeaderContentFormat="DayOfWeekInitial" HeaderBorderBrush="Silver" HeaderBorderThickness="0,0,1,1" HeaderContentTemplate="{StaticResource ScaleHeaderContentTemplate}"/>
                </local:ScaleCollection>
            </Setter.Value>
        </Setter>
        <Setter Property="UpdateScaleInterval" Value="00:15:00"/>
        <Setter Property="PrintingTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border BorderBrush="DarkGray" BorderThickness="1">
                        <ContentPresenter Content="{Binding Content}"/>
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:GanttChartView">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <ScrollViewer x:Name="ScrollViewer" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" HorizontalScrollBarVisibility="Visible" VerticalScrollBarVisibility="Auto" local:GanttChartView.ComputedWidth="{TemplateBinding ComputedWidth}" local:GanttChartView.HeaderHeight="{TemplateBinding HeaderHeight}" local:GanttChartView.HeaderBackground="{TemplateBinding HeaderBackground}" IsTabStop="True"
                                      local:GanttChartView.ComputedIncreaseTimelinePageButtonVisibility="{TemplateBinding ComputedIncreaseTimelinePageButtonVisibility}" local:GanttChartView.ComputedDecreaseTimelinePageButtonVisibility="{TemplateBinding ComputedDecreaseTimelinePageButtonVisibility}"
                                      local:GanttChartView.Scales="{TemplateBinding Scales}">
                            <ScrollViewer.Template>
                                <ControlTemplate TargetType="ScrollViewer">
                                    <Grid Background="{TemplateBinding Background}">
                                        <DockPanel Margin="{TemplateBinding Padding}">
                                            <Grid DockPanel.Dock="Top">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <ScrollViewer x:Name="HeaderScrollViewer" Grid.Column="0" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" IsTabStop="False">
                                                    <Grid HorizontalAlignment="Left" Height="{TemplateBinding local:GanttChartView.HeaderHeight}" Background="{TemplateBinding local:GanttChartView.HeaderBackground}">
                                                        <ItemsControl ItemsSource="{TemplateBinding local:GanttChartView.Scales}" Width="{TemplateBinding local:GanttChartView.ComputedWidth}" IsTabStop="False">
                                                            <ItemsControl.ItemTemplate>
                                                                <DataTemplate>
                                                                    <ItemsControl ItemsSource="{Binding Intervals}" Height="{Binding HeaderHeight}" IsTabStop="False">
                                                                        <ItemsControl.ItemsPanel>
                                                                            <ItemsPanelTemplate>
                                                                                <StackPanel Orientation="Horizontal" VerticalAlignment="Stretch" HorizontalAlignment="Left" IsItemsHost="True"/>
                                                                            </ItemsPanelTemplate>
                                                                        </ItemsControl.ItemsPanel>
                                                                        <ItemsControl.ItemTemplate>
                                                                            <DataTemplate>
                                                                                <Border Background="{Binding Scale.HeaderBackground}" BorderBrush="{Binding Scale.HeaderBorderBrush}" BorderThickness="{Binding Scale.HeaderBorderThickness}" Width="{Binding ComputedWidth}">
                                                                                    <ContentControl Content="{Binding HeaderContent}" ContentTemplate="{Binding Scale.HeaderContentTemplate}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" IsTabStop="False"/>
                                                                                </Border>
                                                                            </DataTemplate>
                                                                        </ItemsControl.ItemTemplate>
                                                                    </ItemsControl>
                                                                </DataTemplate>
                                                            </ItemsControl.ItemTemplate>
                                                        </ItemsControl>
                                                    </Grid>
                                                </ScrollViewer>
                                                <Border Name="PART_HeaderExtraSpace" Grid.Column="1" Width="17" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                                            </Grid>
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="*"/>
                                                    <RowDefinition Height="Auto"/>
                                                </Grid.RowDefinitions>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.Row="0" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Local"/>
                                                <Rectangle Grid.Column="1" Grid.Row="1" Fill="#f0f0f0"/>
                                                <ScrollBar x:Name="PART_VerticalScrollBar" Width="17" IsTabStop="False" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" Orientation="Vertical" ViewportSize="{TemplateBinding ViewportHeight}" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Value="{TemplateBinding VerticalOffset}"/>
                                                <Grid Height="17" Grid.Column="0" Grid.Row="1">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="Auto"/>
                                                        <ColumnDefinition Width="*"/>
                                                        <ColumnDefinition Width="Auto"/>
                                                    </Grid.ColumnDefinitions>
                                                    <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.ColumnSpan="3" IsTabStop="False" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Value="{TemplateBinding HorizontalOffset}"/>
                                                    <Button x:Name="DecreaseTimelinePageButton" Grid.Column="0" Width="17" Visibility="{TemplateBinding local:GanttChartView.ComputedDecreaseTimelinePageButtonVisibility}" Template="{StaticResource UpdateTimelinePageButtonTemplate}" Content="M 4 0 L 4 8 L 0 4 Z"/>
                                                    <Button x:Name="IncreaseTimelinePageButton" Grid.Column="2" Width="17" Visibility="{TemplateBinding local:GanttChartView.ComputedIncreaseTimelinePageButtonVisibility}" Template="{StaticResource UpdateTimelinePageButtonTemplate}" Content="M 0 0 L 4 4 L 0 8 Z"/>
                                                </Grid>
                                            </Grid>
                                        </DockPanel>
                                    </Grid>
                                </ControlTemplate>
                            </ScrollViewer.Template>
                            <Grid Background="{TemplateBinding WorkingTimeBackground}">
                                <ItemsControl ItemsSource="{TemplateBinding Scales}" Width="{TemplateBinding ComputedWidth}" IsTabStop="False" VerticalAlignment="Top" HorizontalAlignment="Left">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <Grid Background="Transparent" IsItemsHost="True"/>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <ItemsControl ItemsSource="{Binding Intervals}" Height="{Binding GanttChartView.ComputedHeight}" IsTabStop="False">
                                                <ItemsControl.ItemsPanel>
                                                    <ItemsPanelTemplate>
                                                        <Grid IsItemsHost="True"/>
                                                    </ItemsPanelTemplate>
                                                </ItemsControl.ItemsPanel>
                                                <ItemsControl.ItemTemplate>
                                                    <DataTemplate>
                                                        <Canvas>
                                                            <Border Background="{Binding Scale.Background}" Canvas.Left="{Binding ComputedLeft}" Width="{Binding ComputedWidth}" Height="{Binding GanttChartView.ActualChartHeight}">
                                                                <ContentControl Content="{Binding Content}" ContentTemplate="{Binding Scale.ContentTemplate}"/>
                                                            </Border>
                                                        </Canvas>
                                                    </DataTemplate>
                                                </ItemsControl.ItemTemplate>
                                            </ItemsControl>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                                <ItemsControl ItemsSource="{TemplateBinding ItemNonworkingHighlights}" Width="{TemplateBinding ComputedWidth}" IsHitTestVisible="False" IsTabStop="False" VerticalAlignment="Top" HorizontalAlignment="Left">
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <Border Background="{Binding GanttChartView.WorkingTimeBackground}" Opacity="{Binding Opacity}">
                                                <ItemsControl ItemsSource="{Binding Intervals}" Width="{Binding GanttChartView.ComputedWidth}" Height="{Binding Height}" IsTabStop="False" IsHitTestVisible="False">
                                                    <ItemsControl.ItemsPanel>
                                                        <ItemsPanelTemplate>
                                                            <Grid IsItemsHost="True"/>
                                                        </ItemsPanelTemplate>
                                                    </ItemsControl.ItemsPanel>
                                                    <ItemsControl.ItemTemplate>
                                                        <DataTemplate>
                                                            <Canvas>
                                                                <Border Background="{Binding GanttChartView.NonworkingTimeBackground}" Canvas.Left="{Binding Left}" Width="{Binding Width}" Height="{Binding Height}"/>
                                                            </Canvas>
                                                        </DataTemplate>
                                                    </ItemsControl.ItemTemplate>
                                                </ItemsControl>
                                            </Border>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                                <ItemsControl ItemsSource="{TemplateBinding ItemAdorners}" Width="{TemplateBinding ComputedWidth}" IsHitTestVisible="False" IsTabStop="False" VerticalAlignment="Top" HorizontalAlignment="Left">
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <Border Height="{Binding Height, Mode=OneTime}" Background="{Binding Background, Mode=OneTime}" BorderBrush="{Binding ItemSeparatorLineStroke, Mode=OneTime}" BorderThickness="{Binding ItemSeparatorLineStrokeThickness, Mode=OneTime}"/>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                                <ItemsControl ItemsSource="{TemplateBinding Scales}" Width="{TemplateBinding ComputedWidth}" IsTabStop="False" VerticalAlignment="Top" HorizontalAlignment="Left">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <Grid Background="Transparent" IsItemsHost="True"/>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <ItemsControl ItemsSource="{Binding Intervals}" Height="{Binding GanttChartView.ComputedHeight}" IsTabStop="False">
                                                <ItemsControl.ItemsPanel>
                                                    <ItemsPanelTemplate>
                                                        <Grid IsItemsHost="True"/>
                                                    </ItemsPanelTemplate>
                                                </ItemsControl.ItemsPanel>
                                                <ItemsControl.ItemTemplate>
                                                    <DataTemplate>
                                                        <Canvas>
                                                            <Border BorderBrush="{Binding Scale.BorderBrush}" BorderThickness="{Binding Scale.BorderThickness}" Canvas.Left="{Binding ComputedLeft}" Width="{Binding ComputedWidth}" Height="{Binding GanttChartView.ActualChartHeight}"/>
                                                        </Canvas>
                                                    </DataTemplate>
                                                </ItemsControl.ItemTemplate>
                                            </ItemsControl>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                                <ItemsPresenter Width="{TemplateBinding ComputedWidth}" Height="{TemplateBinding ActualChartHeight}" VerticalAlignment="Top" HorizontalAlignment="Left" ClipToBounds="True"/>
                                <ItemsControl ItemsSource="{TemplateBinding TaskInterruptionHighlights}" Width="{TemplateBinding ComputedWidth}" IsHitTestVisible="False" IsTabStop="False" VerticalAlignment="Top" HorizontalAlignment="Left">
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <ItemsControl ItemsSource="{Binding Intervals}" Width="{Binding GanttChartView.ComputedWidth}" Height="{Binding Height}" IsTabStop="False" IsHitTestVisible="False">
                                                <ItemsControl.ItemsPanel>
                                                    <ItemsPanelTemplate>
                                                        <Grid IsItemsHost="True"/>
                                                    </ItemsPanelTemplate>
                                                </ItemsControl.ItemsPanel>
                                                <ItemsControl.ItemTemplate>
                                                    <DataTemplate>
                                                        <Canvas>
                                                            <Border Background="{Binding GanttChartView.NonworkingTimeBackground}" Canvas.Left="{Binding Left}" Canvas.Top="{Binding BarTop}" Width="{Binding Width}" Height="{Binding BarHeight}" Opacity="0.75"/>
                                                        </Canvas>
                                                    </DataTemplate>
                                                </ItemsControl.ItemTemplate>
                                            </ItemsControl>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="local:GanttChartDataGrid">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Background" Value="#FFFFFFFF"/>
        <Setter Property="RowBackground" Value="Transparent"/>
        <Setter Property="AlternatingRowBackground" Value="Transparent"/>
        <Setter Property="Foreground" Value="#FF000000"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FFA3AEB9" Offset="0"/>
                    <GradientStop Color="#FF8399A9" Offset="0.375"/>
                    <GradientStop Color="#FF718597" Offset="0.375"/>
                    <GradientStop Color="#FF617584" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="GridLinesVisibility" Value="None"/>
        <Setter Property="ColumnWidth" Value="Auto"/>
        <Setter Property="HeaderHeight" Value="40"/>
        <Setter Property="Columns">
            <Setter.Value>
                <local:DataGridColumnCollection>
                    <hd:DataTreeGridColumn Header="Task"/>
                    <DataGridTextColumn Header="Start" Binding="{Binding Start, Mode=TwoWay, Converter={StaticResource DateTimeStringConverter}}"/>
                    <DataGridTextColumn Header="Finish" Binding="{Binding Finish, Mode=TwoWay, Converter={StaticResource DateTimeStringConverter}}"/>
                    <DataGridCheckBoxColumn Header="Is milestone" Binding="{Binding IsMilestone, Mode=TwoWay}"/>
                    <DataGridCheckBoxColumn Header="Is completed" Binding="{Binding IsCompleted, Mode=TwoWay}"/>
                    <DataGridTextColumn Header="Assignments" Binding="{Binding AssignmentsContent, Mode=TwoWay}"/>
                </local:DataGridColumnCollection>
            </Setter.Value>
        </Setter>
        <Setter Property="HeaderBackground" Value="#f4f5f7"/>
        <Setter Property="UnassignedScheduleChartItemBackground" Value="#80e0e0e0"/>
        <Setter Property="NonworkingTimeBackground" Value="#f8f8f8"/>
        <Setter Property="CurrentTimeLineStroke" Value="#808080"/>
        <Setter Property="ScaleHeaderHeight" Value="20"/>
        <Setter Property="ItemHeight" Value="23"/>
        <Setter Property="BarHeight" Value="14"/>
        <Setter Property="CompletedBarHeight" Value="4"/>
        <Setter Property="StandardBarFill">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                    <LinearGradientBrush.GradientStops>
                        <GradientStop Color="Transparent" Offset="0"/>
                        <GradientStop Color="LightBlue" Offset="0.25"/>
                        <GradientStop Color="Blue" Offset="1"/>
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="StandardBarStroke" Value="Blue"/>
        <Setter Property="StandardBarStrokeThickness" Value="1"/>
        <Setter Property="StandardBarCornerRadius" Value="4"/>
        <Setter Property="StandardCompletedBarFill">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                    <LinearGradientBrush.GradientStops>
                        <GradientStop Color="Transparent" Offset="0"/>
                        <GradientStop Color="Black" Offset="0.15"/>
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="StandardCompletedBarStroke" Value="Black"/>
        <Setter Property="StandardCompletedBarStrokeThickness" Value="1"/>
        <Setter Property="StandardCompletedBarCornerRadius" Value="2"/>
        <Setter Property="SummaryBarFill">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                    <LinearGradientBrush.GradientStops>
                        <GradientStop Color="Black" Offset="0"/>
                        <GradientStop Color="Transparent" Offset="0.1"/>
                        <GradientStop Color="Gray" Offset="0.2"/>
                        <GradientStop Color="Black" Offset="0.6"/>
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="SummaryBarStroke" Value="Black"/>
        <Setter Property="SummaryBarStrokeThickness" Value="1"/>
        <Setter Property="MilestoneBarFill">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                    <LinearGradientBrush.GradientStops>
                        <GradientStop Color="Black" Offset="0"/>
                        <GradientStop Color="Transparent" Offset="0.1"/>
                        <GradientStop Color="Gray" Offset="0.2"/>
                        <GradientStop Color="Black" Offset="0.6"/>
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="MilestoneBarStroke" Value="Black"/>
        <Setter Property="MilestoneBarStrokeThickness" Value="1"/>
        <Setter Property="DependencyLineStroke" Value="Blue"/>
        <Setter Property="DependencyLineStrokeThickness" Value="1"/>
        <Setter Property="StandardTaskTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <Canvas Opacity="0.5" Visibility="{Binding GanttChartView.BaselineVisibility}">
                            <Rectangle Canvas.Left="{Binding ComputedBaselineBarLeft}" Canvas.Top="-4" Width="{Binding ComputedBaselineBarWidth}" Height="{Binding ComputedBarHeight}"
                                       Fill="Transparent" Stroke="{Binding Path=(local:GanttChartView.StandardBarStroke)}" StrokeThickness="{Binding GanttChartView.StandardBarStrokeThickness}" RadiusX="{Binding GanttChartView.StandardBarCornerRadius}" RadiusY="{Binding GanttChartView.StandardBarCornerRadius}" StrokeDashArray="2,2"/>
                        </Canvas>
                        <Grid>
                            <Rectangle Fill="{Binding Path=(local:GanttChartView.StandardBarFill)}" Stroke="{Binding Path=(local:GanttChartView.StandardBarStroke)}" StrokeThickness="{Binding GanttChartView.StandardBarStrokeThickness}" RadiusX="{Binding GanttChartView.StandardBarCornerRadius}" RadiusY="{Binding GanttChartView.StandardBarCornerRadius}"/>
                            <local:DragTaskThumb Role="UpdateStart" Visibility="{Binding GanttChartView.ThumbVisibility}" IsEnabled="{Binding GanttChartView.IsTaskStartThumbEnabled}" IsHitTestVisible="{Binding IsBarThumbHitTestVisible}"/>
                            <local:DragTaskThumb Role="UpdateFinish" Width="2" HorizontalAlignment="Right" Visibility="{Binding GanttChartView.ThumbVisibility}" IsEnabled="{Binding GanttChartView.IsTaskFinishThumbEnabled}" IsHitTestVisible="{Binding IsBarThumbHitTestVisible}"/>
                            <local:DragTaskThumb Role="UpdateStartOnly" Width="2" Margin="-2,0,0,0" HorizontalAlignment="Left" Visibility="{Binding GanttChartView.ThumbVisibility}" IsEnabled="{Binding GanttChartView.IsTaskStartOnlyThumbEnabled}" IsHitTestVisible="{Binding IsBarThumbHitTestVisible}"/>
                        </Grid>
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Center" Visibility="{Binding GanttChartView.TaskCompletedEffortVisibility}">
                            <Rectangle Width="{Binding ComputedCompletedBarWidth}" Height="{Binding GanttChartView.CompletedBarHeight}" VerticalAlignment="Center" Fill="{Binding Path=(local:GanttChartView.StandardCompletedBarFill)}" Stroke="{Binding Path=(local:GanttChartView.StandardCompletedBarStroke)}" StrokeThickness="{Binding GanttChartView.StandardCompletedBarStrokeThickness}" RadiusX="{Binding GanttChartView.StandardCompletedBarCornerRadius}" RadiusY="{Binding GanttChartView.StandardCompletedBarCornerRadius}" IsHitTestVisible="False"/>
                            <local:DragTaskThumb Role="UpdateCompletedFinish" Width="2" Height="{Binding GanttChartView.BarHeight}" Visibility="{Binding GanttChartView.ThumbVisibility}" IsEnabled="{Binding GanttChartView.IsTaskCompletionThumbEnabled}" IsHitTestVisible="{Binding IsBarThumbHitTestVisible}" ToolTip="{Binding Completion, Converter={StaticResource NumberStringConverter}, ConverterParameter=0.##%}"/>
                        </StackPanel>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="SummaryTaskTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="0.2*"/>
                                <RowDefinition Height="0.5*"/>
                                <RowDefinition Height="0.3*"/>
                            </Grid.RowDefinitions>
                            <Rectangle Grid.Column="1" Grid.Row="1" Fill="{Binding Path=(local:GanttChartView.SummaryBarFill)}" Stroke="{Binding Path=(local:GanttChartView.SummaryBarStroke)}" StrokeThickness="{Binding GanttChartView.SummaryBarStrokeThickness}"/>
                            <Line Grid.Column="1" Grid.Row="2" Stroke="{Binding Path=(local:GanttChartView.StandardBarStroke)}" StrokeThickness="1" StrokeDashArray="1,1" Y1="1" Y2="1" X1="0" X2="{Binding ComputedBarWidth}" Visibility="{Binding ExpansionVisibility}"/>
                            <Polygon Grid.Column="0" Grid.Row="1" Grid.RowSpan="2" Fill="{Binding Path=(local:GanttChartView.SummaryBarFill)}" Stroke="{Binding Path=(local:GanttChartView.SummaryBarStroke)}" StrokeThickness="{Binding GanttChartView.SummaryBarStrokeThickness}" Width="{Binding GanttChartView.BarHeight}" Stretch="Fill"
                                     Points="0,0 0,0.5 0.5,0.8 1,0.5 1,0"/>
                            <Polygon Grid.Column="3" Grid.Row="1" Grid.RowSpan="2" Fill="{Binding Path=(local:GanttChartView.SummaryBarFill)}" Stroke="{Binding Path=(local:GanttChartView.SummaryBarStroke)}" StrokeThickness="{Binding GanttChartView.SummaryBarStrokeThickness}" Width="{Binding GanttChartView.BarHeight}" Stretch="Fill"
                                     Points="1,0 1,0.5 0.5,0.8 0,0.5 0,0"/>
                        </Grid>
                        <local:TaskExpander/>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="MilestoneTaskTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <Canvas Opacity="0.5" Visibility="{Binding GanttChartView.BaselineVisibility}">
                            <Polygon Canvas.Left="{Binding ComputedBaselineBarLeft}" Width="{Binding ComputedBarHeight}" Height="{Binding ComputedBarHeight}"
                                     Fill="Transparent" Stroke="{Binding Path=(local:GanttChartView.MilestoneBarStroke)}" StrokeThickness="{Binding GanttChartView.MilestoneBarStrokeThickness}" StrokeDashArray="2,2" Stretch="UniformToFill"
                                     Points="0.5,0 1,0.5 0.5,1 0,0.5"/>
                        </Canvas>
                        <Polygon Fill="{Binding Path=(local:GanttChartView.MilestoneBarFill)}" Stroke="{Binding Path=(local:GanttChartView.MilestoneBarStroke)}" StrokeThickness="{Binding GanttChartView.MilestoneBarStrokeThickness}" Stretch="UniformToFill"
                                 Points="0.5,0 1,0.5 0.5,1 0,0.5"/>
                        <local:DragTaskThumb Role="UpdateStart" Visibility="{Binding GanttChartView.ThumbVisibility}" IsEnabled="{Binding GanttChartView.IsTaskStartThumbEnabled}" IsHitTestVisible="{Binding IsBarThumbHitTestVisible}"/>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ToolTipTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl Content="{Binding Content}" IsTabStop="False"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="AssignmentsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl Content="{Binding AssignmentsContent}" IsHitTestVisible="False" IsTabStop="False"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="DependencyLineTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <ToolTipService.ToolTip>
                            <ToolTip Content="{Binding}" ContentTemplate="{Binding GanttChartView.PredecessorToolTipTemplate}" Visibility="{Binding GanttChartView.DependencyToolTipVisibility}"/>
                        </ToolTipService.ToolTip>
                        <shapes:DependencyArrowLine Stroke="Transparent" StrokeThickness="3" Points="{Binding ComputedDependencyLinePoints}"/>
                        <shapes:DependencyArrowLine x:Name="DependencyArrowLine" Stroke="{Binding Path=(local:GanttChartView.DependencyLineStroke)}" StrokeThickness="{Binding GanttChartView.DependencyLineStrokeThickness}" Points="{Binding ComputedDependencyLinePoints}"/>
                    </Grid>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(local:GanttChartView.DependencyLineStroke)}" Value="{x:Null}">
                            <Setter TargetName="DependencyArrowLine" Property="Stroke" Value="{Binding Path=DependentItem.(local:GanttChartView.DependencyLineStroke)}"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="PredecessorToolTipTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <ContentControl Content="{Binding Item.Content}" VerticalAlignment="Center" IsTabStop="False"/>
                        <TextBlock Text="-" Margin="1,0" VerticalAlignment="Center"/>
                        <ContentControl Content="{Binding DependentItem.Content}" VerticalAlignment="Center" IsTabStop="False"/>
                    </StackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:TaskPresenter Visibility="{Binding BarVisibility}" IsVirtuallyVisible="{Binding IsVirtuallyVisible}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <Canvas IsItemsHost="True"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Scales">
            <Setter.Value>
                <local:ScaleCollection>
                    <local:Scale ScaleType="Weeks" HeaderBorderBrush="Silver" HeaderBorderThickness="0,0,1,1" HeaderContentTemplate="{StaticResource ScaleHeaderContentTemplate}" BorderBrush="Silver" BorderThickness="0,0,1,0"/>
                    <local:Scale ScaleType="Days" HeaderContentFormat="DayOfWeekInitial" HeaderBorderBrush="Silver" HeaderBorderThickness="0,0,1,1" HeaderContentTemplate="{StaticResource ScaleHeaderContentTemplate}"/>
                </local:ScaleCollection>
            </Setter.Value>
        </Setter>
        <Setter Property="UpdateScaleInterval" Value="00:15:00"/>
        <Setter Property="IndentationUnitSize" Value="16"/>
        <Setter Property="ExpanderTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Width="16" Height="16" Background="#00FFFFFF" Padding="5,5,5,5">
                        <Path Name="ExpandPath" Fill="#00FFFFFF" Stroke="#FF989898">
                            <Path.Data>
                                <PathGeometry Figures="M 0 0 L 0 6 L 6 0 Z"/>
                            </Path.Data>
                            <Path.RenderTransform>
                                <RotateTransform CenterX="3" CenterY="3" Angle="135"/>
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF1BBBFA"/>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="#00FFFFFF"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="RenderTransform" TargetName="ExpandPath">
                                <Setter.Value>
                                    <RotateTransform CenterX="3" CenterY="3" Angle="180"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="#FF595959"/>
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF262626"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="SplitterBorderBrush" Value="Silver"/>
        <Setter Property="SplitterBorderThickness" Value="1,0"/>
        <Setter Property="PrintingTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border BorderBrush="DarkGray" BorderThickness="1">
                        <ContentPresenter Content="{Binding Content}"/>
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:GanttChartDataGrid">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="{Binding DataGridWidth, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" MinWidth="{TemplateBinding MinDataGridWidth}" MaxWidth="{TemplateBinding MaxDataGridWidth}"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="{Binding ChartWidth, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" MinWidth="{TemplateBinding MinChartWidth}" MaxWidth="{TemplateBinding MaxChartWidth}"/>
                            </Grid.ColumnDefinitions>
                            <hd:DataTreeGrid x:Name="DataTreeGrid" Grid.Column="0" HorizontalScrollBarVisibility="Visible" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" BorderThickness="0" Foreground="{TemplateBinding Foreground}" Background="Transparent" RowBackground="{TemplateBinding RowBackground}" AlternatingRowBackground="{TemplateBinding AlternatingRowBackground}" GridLinesVisibility="{TemplateBinding GridLinesVisibility}"
                                             AlternationCount="{TemplateBinding AlternationCount}" CellStyle="{TemplateBinding CellStyle}" ClipboardCopyMode="{TemplateBinding ClipboardCopyMode}" ColumnHeaderStyle="{TemplateBinding ColumnHeaderStyle}" ColumnWidth="{TemplateBinding ColumnWidth}" FrozenColumnCount="{TemplateBinding FrozenColumnCount}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalGridLinesBrush="{TemplateBinding HorizontalGridLinesBrush}" VerticalGridLinesBrush="{TemplateBinding VerticalGridLinesBrush}" IsTextSearchEnabled="{TemplateBinding IsTextSearchEnabled}" IsTextSearchCaseSensitive="{TemplateBinding IsTextSearchCaseSensitive}" MaxColumnWidth="{TemplateBinding MaxColumnWidth}" MinColumnWidth="{TemplateBinding MinColumnWidth}" RowStyle="{TemplateBinding RowStyle}" RowStyleSelector="{TemplateBinding RowStyleSelector}" RowValidationErrorTemplate="{Binding RowValidationErrorTemplate}" SelectionMode="{TemplateBinding SelectionMode}" SelectedValuePath="{TemplateBinding SelectedValuePath}"
                                             ColumnHeaderHeight="{TemplateBinding HeaderHeight}" RowHeight="{TemplateBinding ItemHeight}"
                                             ExpanderTemplate="{TemplateBinding ExpanderTemplate}" IndentationUnitSize="{TemplateBinding IndentationUnitSize}"
                                             IsReadOnly="{TemplateBinding IsReadOnly}"
                                             IsAsyncPresentationEnabled="False"/>
                            <GridSplitter Grid.Column="1" HorizontalAlignment="Center" Width="{TemplateBinding SplitterWidth}" IsEnabled="{TemplateBinding IsSplitterEnabled}" Background="{TemplateBinding SplitterBackground}" BorderBrush="{TemplateBinding SplitterBorderBrush}" BorderThickness="{TemplateBinding SplitterBorderThickness}"/>
                            <local:GanttChartView x:Name="GanttChartView" Grid.Column="2" Foreground="{TemplateBinding Foreground}" Background="Transparent" BorderBrush="Transparent" BorderThickness="0" ItemTemplate="{TemplateBinding ItemTemplate}" ItemsPanel="{TemplateBinding ItemsPanel}" ScrollViewer.CanContentScroll="False"
                                                  AlternationCount="{TemplateBinding AlternationCount}" IsTextSearchEnabled="{TemplateBinding IsTextSearchEnabled}" IsTextSearchCaseSensitive="{TemplateBinding IsTextSearchCaseSensitive}"
                                                  HeaderHeight="{TemplateBinding HeaderHeight}" ScaleHeaderHeight="{TemplateBinding ScaleHeaderHeight}" ItemHeight="{TemplateBinding ItemHeight}" AreIndividualItemHeightsApplied="{TemplateBinding AreIndividualItemHeightsApplied}" AreIndividualItemAppearanceSettingsApplied="{TemplateBinding AreIndividualItemAppearanceSettingsApplied}" TimelinePageStart="{TemplateBinding TimelinePageStart}" TimelinePageFinish="{TemplateBinding TimelinePageFinish}" VisibleWeekStart="{TemplateBinding VisibleWeekStart}" VisibleWeekFinish="{TemplateBinding VisibleWeekFinish}" VisibleDayStart="{TemplateBinding VisibleDayStart}" VisibleDayFinish="{TemplateBinding VisibleDayFinish}" WorkingWeekStart="{TemplateBinding WorkingWeekStart}" WorkingWeekFinish="{TemplateBinding WorkingWeekFinish}" WorkingDayStart="{TemplateBinding WorkingDayStart}" WorkingDayFinish="{TemplateBinding WorkingDayFinish}" NonworkingIntervals="{TemplateBinding NonworkingIntervals}" NonworkingDayIntervalProvider="{TemplateBinding NonworkingDayIntervalProvider}" HourWidth="{TemplateBinding HourWidth}" Scales="{TemplateBinding Scales}" UpdateScaleOrigin="{TemplateBinding UpdateScaleOrigin}" UpdateScaleInterval="{TemplateBinding UpdateScaleInterval}"
                                                  IsFittingToTimelinePageEnabled="{TemplateBinding IsFittingToTimelinePageEnabled}" IsFittingToTimelinePageEnabledUpdatingScales="{TemplateBinding IsFittingToTimelinePageEnabledUpdatingScales}" IsFittingToTimelinePageEnabledUpdatingScalesToMinType="{TemplateBinding IsFittingToTimelinePageEnabledUpdatingScalesToMinType}" IsFittingToTimelinePageEnabledUpdatingScalesToMaxType="{TemplateBinding IsFittingToTimelinePageEnabledUpdatingScalesToMaxType}" IsMouseWheelZoomEnabled="{TemplateBinding IsMouseWheelZoomEnabled}" IsMouseWheelZoomEnabledPreservingMousePositionTime="{TemplateBinding IsMouseWheelZoomEnabledPreservingMousePositionTime}" IsMouseWheelZoomEnabledSpeed="{TemplateBinding IsMouseWheelZoomEnabledSpeed}" IsMouseWheelZoomEnabledMinHourWidth="{TemplateBinding IsMouseWheelZoomEnabledMinHourWidth}" IsMouseWheelZoomEnabledMaxHourWidth="{TemplateBinding IsMouseWheelZoomEnabledMaxHourWidth}" IsMouseWheelZoomEnabledUpdatingScales="{TemplateBinding IsMouseWheelZoomEnabledUpdatingScales}" IsMouseWheelZoomEnabledUpdatingScalesToMinType="{TemplateBinding IsMouseWheelZoomEnabledUpdatingScalesToMinType}" IsMouseWheelZoomEnabledUpdatingScalesToMaxType="{TemplateBinding IsMouseWheelZoomEnabledUpdatingScalesToMaxType}" IsMouseWheelZoomEnabledUpdatingTimelinePage="{TemplateBinding IsMouseWheelZoomEnabledUpdatingTimelinePage}"
                                                  IsReadOnly="{TemplateBinding IsReadOnly}" IsTaskToolTipVisible="{TemplateBinding IsTaskToolTipVisible}" IsDependencyToolTipVisible="{TemplateBinding IsTaskToolTipVisible}" IsTaskCompletedEffortVisible="{TemplateBinding IsTaskCompletedEffortVisible}" AreTaskDependenciesVisible="{TemplateBinding AreTaskDependenciesVisible}" AllowCreatingStartDependencies="{TemplateBinding AllowCreatingStartDependencies}" AllowCreatingToFinishDependencies="{TemplateBinding AllowCreatingToFinishDependencies}" IsNonworkingTimeHighlighted="{TemplateBinding IsNonworkingTimeHighlighted}" IsCurrentTimeLineVisible="{TemplateBinding IsCurrentTimeLineVisible}" CurrentTimeLineUpdateInterval="{TemplateBinding CurrentTimeLineUpdateInterval}" AreUpdateTimelinePageButtonsVisible="{TemplateBinding AreUpdateTimelinePageButtonsVisible}" UpdateTimelinePageAmount="{TemplateBinding UpdateTimelinePageAmount}" DependencyCreationValidator="{TemplateBinding DependencyCreationValidator}" DependencyDeletionValidator="{TemplateBinding DependencyDeletionValidator}" IsTaskStartReadOnly="{TemplateBinding IsTaskStartReadOnly}" IsTaskFinishReadOnly="{TemplateBinding IsTaskFinishReadOnly}" IsTaskCompletionReadOnly="{TemplateBinding IsTaskCompletionReadOnly}"
                                                  HeaderBackground="{TemplateBinding HeaderBackground}" WorkingTimeBackground="{TemplateBinding WorkingTimeBackground}" NonworkingTimeBackground="{TemplateBinding NonworkingTimeBackground}" CurrentTimeLineStroke="{TemplateBinding CurrentTimeLineStroke}" ItemSeparatorLinesStroke="{TemplateBinding ItemSeparatorLinesStroke}" AlternatingItemBackground="{TemplateBinding AlternatingItemBackground}" IsAlternatingItemBackgroundInverted="{TemplateBinding IsAlternatingItemBackgroundInverted}" IsIndividualItemNonworkingTimeHighlighted="{TemplateBinding IsIndividualItemNonworkingTimeHighlighted}" AreTaskInterruptionsHighlighted="{TemplateBinding AreTaskInterruptionsHighlighted}"
                                                  StandardBarFill="{TemplateBinding StandardBarFill}" StandardBarStroke="{TemplateBinding StandardBarStroke}" StandardBarStrokeThickness="{TemplateBinding StandardBarStrokeThickness}" StandardBarCornerRadius="{TemplateBinding StandardBarCornerRadius}" StandardCompletedBarFill="{TemplateBinding StandardCompletedBarFill}" StandardCompletedBarStroke="{TemplateBinding StandardCompletedBarStroke}" StandardCompletedBarStrokeThickness="{TemplateBinding StandardCompletedBarStrokeThickness}" StandardCompletedBarCornerRadius="{TemplateBinding StandardCompletedBarCornerRadius}" StandardTaskTemplate="{TemplateBinding StandardTaskTemplate}"
                                                  SummaryBarFill="{TemplateBinding SummaryBarFill}" SummaryBarStroke="{TemplateBinding SummaryBarStroke}" SummaryBarStrokeThickness="{TemplateBinding SummaryBarStrokeThickness}" SummaryTaskTemplate="{TemplateBinding SummaryTaskTemplate}"
                                                  MilestoneBarFill="{TemplateBinding MilestoneBarFill}" MilestoneBarStroke="{TemplateBinding MilestoneBarStroke}" MilestoneBarStrokeThickness="{TemplateBinding MilestoneBarStrokeThickness}" MilestoneTaskTemplate="{TemplateBinding MilestoneTaskTemplate}"
                                                  AssignmentsTemplate="{TemplateBinding AssignmentsTemplate}" DependencyLineStroke="{TemplateBinding DependencyLineStroke}" DependencyLineStrokeThickness="{TemplateBinding DependencyLineStrokeThickness}" DependencyLineTemplate="{TemplateBinding DependencyLineTemplate}" ToolTipTemplate="{TemplateBinding ToolTipTemplate}" PredecessorToolTipTemplate="{TemplateBinding PredecessorToolTipTemplate}"
                                                  BarHeight="{TemplateBinding BarHeight}" CompletedBarHeight="{TemplateBinding CompletedBarHeight}" IsVirtualizing="{TemplateBinding IsVirtualizing}"
                                                  DependencyDeletionContextMenuItemHeader="{TemplateBinding DependencyDeletionContextMenuItemHeader}" 
                                                  AssignableResources="{TemplateBinding AssignableResources}" UnassignedScheduleChartItemContent="{TemplateBinding UnassignedScheduleChartItemContent}" UnassignedScheduleChartItemBackground="{TemplateBinding UnassignedScheduleChartItemBackground}"
                                                  IsAsyncPresentationEnabled="False" IsBaselineVisible="{TemplateBinding IsBaselineVisible}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="local:ScheduleChartView" BasedOn="{StaticResource {x:Type local:GanttChartView}}">
        <Setter Property="MultipleLinesPerRowAlternatingItemBackground" Value="#40e0e0e0"/>
        <Setter Property="StandardTaskTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <Grid>
                            <Rectangle Fill="{Binding Path=(local:GanttChartView.StandardBarFill)}" Stroke="{Binding Path=(local:GanttChartView.StandardBarStroke)}" StrokeThickness="{Binding GanttChartView.StandardBarStrokeThickness}" RadiusX="{Binding GanttChartView.StandardBarCornerRadius}" RadiusY="{Binding GanttChartView.StandardBarCornerRadius}"/>
                            <local:DragTaskThumb Role="UpdateStart" Visibility="{Binding GanttChartView.ThumbVisibility}" IsEnabled="{Binding GanttChartView.IsTaskStartThumbEnabled}" IsHitTestVisible="{Binding IsBarThumbHitTestVisible}"/>
                            <local:DragTaskThumb Role="UpdateFinish" Width="2" HorizontalAlignment="Right" Visibility="{Binding GanttChartView.ThumbVisibility}" IsEnabled="{Binding GanttChartView.IsTaskFinishThumbEnabled}" IsHitTestVisible="{Binding IsBarThumbHitTestVisible}"/>
                            <local:DragTaskThumb Role="UpdateStartOnly" Margin="-2,0,0,0" Width="2" HorizontalAlignment="Left" Visibility="{Binding GanttChartView.ThumbVisibility}" IsEnabled="{Binding GanttChartView.IsTaskStartOnlyThumbEnabled}" IsHitTestVisible="{Binding IsBarThumbHitTestVisible}"/>
                        </Grid>
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Center" Visibility="{Binding GanttChartView.TaskCompletedEffortVisibility}">
                            <Rectangle Width="{Binding ComputedCompletedBarWidth}" Height="{Binding GanttChartView.CompletedBarHeight}" VerticalAlignment="Center" Fill="{Binding Path=(local:GanttChartView.StandardCompletedBarFill)}" Stroke="{Binding Path=(local:GanttChartView.StandardCompletedBarStroke)}" StrokeThickness="{Binding GanttChartView.StandardCompletedBarStrokeThickness}" RadiusX="{Binding GanttChartView.StandardCompletedBarCornerRadius}" RadiusY="{Binding GanttChartView.StandardCompletedBarCornerRadius}" IsHitTestVisible="False"/>
                            <local:DragTaskThumb Role="UpdateCompletedFinish" Width="2" Height="{Binding GanttChartView.BarHeight}" Visibility="{Binding GanttChartView.ThumbVisibility}" IsEnabled="{Binding GanttChartView.IsTaskCompletionThumbEnabled}" IsHitTestVisible="{Binding IsBarThumbHitTestVisible}"/>
                        </StackPanel>
                        <Grid Margin="0,0,0,-2" Visibility="{Binding Path=GanttChartView.(local:ScheduleChartView.AssignmentThumbVisibility)}">
                            <local:DragAssignmentThumb Visibility="{Binding GanttChartView.ThumbVisibility}" IsHitTestVisible="{Binding IsBarThumbHitTestVisible}"/>
                        </Grid>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="MilestoneTaskTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <Polygon Fill="{Binding Path=(local:GanttChartView.MilestoneBarFill)}" Stroke="{Binding Path=(local:GanttChartView.MilestoneBarStroke)}" StrokeThickness="{Binding GanttChartView.MilestoneBarStrokeThickness}" Stretch="UniformToFill"
                                 Points="0.5,0 1,0.5 0.5,1 0,0.5"/>
                        <local:DragTaskThumb Role="UpdateStart" Visibility="{Binding GanttChartView.ThumbVisibility}" IsEnabled="{Binding GanttChartView.IsTaskStartThumbEnabled}" IsHitTestVisible="{Binding IsBarThumbHitTestVisible}"/>
                        <Grid Margin="-2,0,2,-2" Visibility="{Binding Path=GanttChartView.(local:ScheduleChartView.AssignmentThumbVisibility)}">
                            <local:DragAssignmentThumb Visibility="{Binding GanttChartView.ThumbVisibility}" IsHitTestVisible="{Binding IsBarThumbHitTestVisible}"/>
                        </Grid>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="local:ScheduleChartDataGrid" BasedOn="{StaticResource {x:Type local:GanttChartDataGrid}}">
        <Setter Property="MultipleLinesPerRowAlternatingItemBackground" Value="#40e0e0e0"/>
        <Setter Property="Columns">
            <Setter.Value>
                <local:DataGridColumnCollection>
                    <DataGridTextColumn Header="Resource" Binding="{Binding Content, Mode=TwoWay}"/>
                </local:DataGridColumnCollection>
            </Setter.Value>
        </Setter>
        <Setter Property="StandardTaskTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <Grid>
                            <Rectangle Fill="{Binding Path=(local:GanttChartView.StandardBarFill)}" Stroke="{Binding Path=(local:GanttChartView.StandardBarStroke)}" StrokeThickness="{Binding GanttChartView.StandardBarStrokeThickness}" RadiusX="{Binding GanttChartView.StandardBarCornerRadius}" RadiusY="{Binding GanttChartView.StandardBarCornerRadius}"/>
                            <local:DragTaskThumb Role="UpdateStart" Visibility="{Binding GanttChartView.ThumbVisibility}" IsEnabled="{Binding GanttChartView.IsTaskStartThumbEnabled}" IsHitTestVisible="{Binding IsBarThumbHitTestVisible}"/>
                            <local:DragTaskThumb Role="UpdateFinish" Width="2" HorizontalAlignment="Right" Visibility="{Binding GanttChartView.ThumbVisibility}" IsEnabled="{Binding GanttChartView.IsTaskFinishThumbEnabled}" IsHitTestVisible="{Binding IsBarThumbHitTestVisible}"/>
                            <local:DragTaskThumb Role="UpdateStartOnly" Margin="-2,0,0,0" Width="2" HorizontalAlignment="Left" Visibility="{Binding GanttChartView.ThumbVisibility}" IsEnabled="{Binding GanttChartView.IsTaskStartOnlyThumbEnabled}" IsHitTestVisible="{Binding IsBarThumbHitTestVisible}"/>
                        </Grid>
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Center" Visibility="{Binding GanttChartView.TaskCompletedEffortVisibility}">
                            <Rectangle Width="{Binding ComputedCompletedBarWidth}" Height="{Binding GanttChartView.CompletedBarHeight}" VerticalAlignment="Center" Fill="{Binding Path=(local:GanttChartView.StandardCompletedBarFill)}" Stroke="{Binding Path=(local:GanttChartView.StandardCompletedBarStroke)}" StrokeThickness="{Binding GanttChartView.StandardCompletedBarStrokeThickness}" RadiusX="{Binding GanttChartView.StandardCompletedBarCornerRadius}" RadiusY="{Binding GanttChartView.StandardCompletedBarCornerRadius}" IsHitTestVisible="False"/>
                            <local:DragTaskThumb Role="UpdateCompletedFinish" Width="2" Height="{Binding GanttChartView.BarHeight}" Visibility="{Binding GanttChartView.ThumbVisibility}" IsEnabled="{Binding GanttChartView.IsTaskCompletionThumbEnabled}" IsHitTestVisible="{Binding IsBarThumbHitTestVisible}"/>
                        </StackPanel>
                        <Grid Margin="0,0,0,-2" Visibility="{Binding Path=GanttChartView.(local:ScheduleChartView.AssignmentThumbVisibility)}">
                            <local:DragAssignmentThumb Visibility="{Binding GanttChartView.ThumbVisibility}" IsHitTestVisible="{Binding IsBarThumbHitTestVisible}"/>
                        </Grid>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="MilestoneTaskTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <Polygon Fill="{Binding Path=(local:GanttChartView.MilestoneBarFill)}" Stroke="{Binding Path=(local:GanttChartView.MilestoneBarStroke)}" StrokeThickness="{Binding GanttChartView.MilestoneBarStrokeThickness}" Stretch="UniformToFill"
                                 Points="0.5,0 1,0.5 0.5,1 0,0.5"/>
                        <local:DragTaskThumb Role="UpdateStart" Visibility="{Binding GanttChartView.ThumbVisibility}" IsEnabled="{Binding GanttChartView.IsTaskStartThumbEnabled}" IsHitTestVisible="{Binding IsBarThumbHitTestVisible}"/>
                        <Grid Margin="-2,0,2,-2" Visibility="{Binding Path=GanttChartView.(local:ScheduleChartView.AssignmentThumbVisibility)}">
                            <local:DragAssignmentThumb Visibility="{Binding GanttChartView.ThumbVisibility}" IsHitTestVisible="{Binding IsBarThumbHitTestVisible}"/>
                        </Grid>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:ScheduleChartDataGrid">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="{Binding DataGridWidth, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" MinWidth="{TemplateBinding MinDataGridWidth}" MaxWidth="{TemplateBinding MaxDataGridWidth}"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="{Binding ChartWidth, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" MinWidth="{TemplateBinding MinChartWidth}" MaxWidth="{TemplateBinding MaxChartWidth}"/>
                            </Grid.ColumnDefinitions>
                            <hd:DataTreeGrid x:Name="DataTreeGrid" Grid.Column="0" HorizontalScrollBarVisibility="Visible" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" BorderThickness="0" Foreground="{TemplateBinding Foreground}" Background="Transparent" RowBackground="{TemplateBinding RowBackground}" AlternatingRowBackground="{TemplateBinding AlternatingRowBackground}" GridLinesVisibility="{TemplateBinding GridLinesVisibility}"
                                             AlternationCount="{TemplateBinding AlternationCount}" CellStyle="{TemplateBinding CellStyle}" ClipboardCopyMode="{TemplateBinding ClipboardCopyMode}" ColumnHeaderStyle="{TemplateBinding ColumnHeaderStyle}" ColumnWidth="{TemplateBinding ColumnWidth}" FrozenColumnCount="{TemplateBinding FrozenColumnCount}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalGridLinesBrush="{TemplateBinding HorizontalGridLinesBrush}" VerticalGridLinesBrush="{TemplateBinding VerticalGridLinesBrush}" IsTextSearchEnabled="{TemplateBinding IsTextSearchEnabled}" IsTextSearchCaseSensitive="{TemplateBinding IsTextSearchCaseSensitive}" MaxColumnWidth="{TemplateBinding MaxColumnWidth}" MinColumnWidth="{TemplateBinding MinColumnWidth}" RowStyle="{TemplateBinding RowStyle}" RowStyleSelector="{TemplateBinding RowStyleSelector}" RowValidationErrorTemplate="{Binding RowValidationErrorTemplate}" SelectionMode="{TemplateBinding SelectionMode}" SelectedValuePath="{TemplateBinding SelectedValuePath}"
                                             ColumnHeaderHeight="{TemplateBinding HeaderHeight}" RowHeight="{TemplateBinding ItemHeight}"
                                             ExpanderTemplate="{TemplateBinding ExpanderTemplate}" IndentationUnitSize="{TemplateBinding IndentationUnitSize}"
                                             IsReadOnly="{TemplateBinding IsReadOnly}"
                                             IsAsyncPresentationEnabled="False"/>
                            <GridSplitter Grid.Column="1" HorizontalAlignment="Center" Width="{TemplateBinding SplitterWidth}" IsEnabled="{TemplateBinding IsSplitterEnabled}" Background="{TemplateBinding SplitterBackground}" BorderBrush="{TemplateBinding SplitterBorderBrush}" BorderThickness="{TemplateBinding SplitterBorderThickness}"/>
                            <local:GanttChartView x:Name="GanttChartView" Grid.Column="2" Foreground="{TemplateBinding Foreground}" Background="Transparent" BorderBrush="Transparent" BorderThickness="0" ItemTemplate="{TemplateBinding ItemTemplate}" ItemsPanel="{TemplateBinding ItemsPanel}" ScrollViewer.CanContentScroll="False"
                                                  AlternationCount="{TemplateBinding AlternationCount}" IsTextSearchEnabled="{TemplateBinding IsTextSearchEnabled}" IsTextSearchCaseSensitive="{TemplateBinding IsTextSearchCaseSensitive}"
                                                  HeaderHeight="{TemplateBinding HeaderHeight}" ScaleHeaderHeight="{TemplateBinding ScaleHeaderHeight}" ItemHeight="{TemplateBinding ItemHeight}" AreIndividualItemHeightsApplied="{TemplateBinding AreIndividualItemHeightsApplied}" AreIndividualItemAppearanceSettingsApplied="{TemplateBinding AreIndividualItemAppearanceSettingsApplied}" TimelinePageStart="{TemplateBinding TimelinePageStart}" TimelinePageFinish="{TemplateBinding TimelinePageFinish}" VisibleWeekStart="{TemplateBinding VisibleWeekStart}" VisibleWeekFinish="{TemplateBinding VisibleWeekFinish}" VisibleDayStart="{TemplateBinding VisibleDayStart}" VisibleDayFinish="{TemplateBinding VisibleDayFinish}" WorkingWeekStart="{TemplateBinding WorkingWeekStart}" WorkingWeekFinish="{TemplateBinding WorkingWeekFinish}" WorkingDayStart="{TemplateBinding WorkingDayStart}" WorkingDayFinish="{TemplateBinding WorkingDayFinish}" NonworkingIntervals="{TemplateBinding NonworkingIntervals}" NonworkingDayIntervalProvider="{TemplateBinding NonworkingDayIntervalProvider}" HourWidth="{TemplateBinding HourWidth}" Scales="{TemplateBinding Scales}" UpdateScaleOrigin="{TemplateBinding UpdateScaleOrigin}" UpdateScaleInterval="{TemplateBinding UpdateScaleInterval}"
                                                  IsFittingToTimelinePageEnabled="{TemplateBinding IsFittingToTimelinePageEnabled}" IsFittingToTimelinePageEnabledUpdatingScales="{TemplateBinding IsFittingToTimelinePageEnabledUpdatingScales}" IsFittingToTimelinePageEnabledUpdatingScalesToMinType="{TemplateBinding IsFittingToTimelinePageEnabledUpdatingScalesToMinType}" IsFittingToTimelinePageEnabledUpdatingScalesToMaxType="{TemplateBinding IsFittingToTimelinePageEnabledUpdatingScalesToMaxType}" IsMouseWheelZoomEnabled="{TemplateBinding IsMouseWheelZoomEnabled}" IsMouseWheelZoomEnabledPreservingMousePositionTime="{TemplateBinding IsMouseWheelZoomEnabledPreservingMousePositionTime}" IsMouseWheelZoomEnabledSpeed="{TemplateBinding IsMouseWheelZoomEnabledSpeed}" IsMouseWheelZoomEnabledMinHourWidth="{TemplateBinding IsMouseWheelZoomEnabledMinHourWidth}" IsMouseWheelZoomEnabledMaxHourWidth="{TemplateBinding IsMouseWheelZoomEnabledMaxHourWidth}" IsMouseWheelZoomEnabledUpdatingScales="{TemplateBinding IsMouseWheelZoomEnabledUpdatingScales}" IsMouseWheelZoomEnabledUpdatingScalesToMinType="{TemplateBinding IsMouseWheelZoomEnabledUpdatingScalesToMinType}" IsMouseWheelZoomEnabledUpdatingScalesToMaxType="{TemplateBinding IsMouseWheelZoomEnabledUpdatingScalesToMaxType}" IsMouseWheelZoomEnabledUpdatingTimelinePage="{TemplateBinding IsMouseWheelZoomEnabledUpdatingTimelinePage}"
                                                  IsReadOnly="{TemplateBinding IsReadOnly}" IsTaskToolTipVisible="{TemplateBinding IsTaskToolTipVisible}" IsTaskCompletedEffortVisible="{TemplateBinding IsTaskCompletedEffortVisible}" AreTaskDependenciesVisible="{TemplateBinding AreTaskDependenciesVisible}" AllowCreatingStartDependencies="{TemplateBinding AllowCreatingStartDependencies}" AllowCreatingToFinishDependencies="{TemplateBinding AllowCreatingToFinishDependencies}" IsNonworkingTimeHighlighted="{TemplateBinding IsNonworkingTimeHighlighted}" IsCurrentTimeLineVisible="{TemplateBinding IsCurrentTimeLineVisible}" CurrentTimeLineUpdateInterval="{TemplateBinding CurrentTimeLineUpdateInterval}" AreUpdateTimelinePageButtonsVisible="{TemplateBinding AreUpdateTimelinePageButtonsVisible}" UpdateTimelinePageAmount="{TemplateBinding UpdateTimelinePageAmount}" DependencyCreationValidator="{x:Null}" IsTaskStartReadOnly="{TemplateBinding IsTaskStartReadOnly}" IsTaskFinishReadOnly="{TemplateBinding IsTaskFinishReadOnly}" IsTaskCompletionReadOnly="{TemplateBinding IsTaskCompletionReadOnly}"
                                                  HeaderBackground="{TemplateBinding HeaderBackground}" WorkingTimeBackground="{TemplateBinding WorkingTimeBackground}" NonworkingTimeBackground="{TemplateBinding NonworkingTimeBackground}" CurrentTimeLineStroke="{TemplateBinding CurrentTimeLineStroke}" ItemSeparatorLinesStroke="{TemplateBinding ItemSeparatorLinesStroke}" AlternatingItemBackground="{TemplateBinding AlternatingItemBackground}" IsAlternatingItemBackgroundInverted="{TemplateBinding IsAlternatingItemBackgroundInverted}" IsIndividualItemNonworkingTimeHighlighted="{TemplateBinding IsIndividualItemNonworkingTimeHighlighted}"
                                                  StandardBarFill="{TemplateBinding StandardBarFill}" StandardBarStroke="{TemplateBinding StandardBarStroke}" StandardBarStrokeThickness="{TemplateBinding StandardBarStrokeThickness}" StandardBarCornerRadius="{TemplateBinding StandardBarCornerRadius}" StandardCompletedBarFill="{TemplateBinding StandardCompletedBarFill}" StandardCompletedBarStroke="{TemplateBinding StandardCompletedBarStroke}" StandardCompletedBarStrokeThickness="{TemplateBinding StandardCompletedBarStrokeThickness}" StandardCompletedBarCornerRadius="{TemplateBinding StandardCompletedBarCornerRadius}" StandardTaskTemplate="{TemplateBinding StandardTaskTemplate}"
                                                  MilestoneBarFill="{TemplateBinding MilestoneBarFill}" MilestoneBarStroke="{TemplateBinding MilestoneBarStroke}" MilestoneBarStrokeThickness="{TemplateBinding MilestoneBarStrokeThickness}" MilestoneTaskTemplate="{TemplateBinding MilestoneTaskTemplate}"
                                                  AssignmentsTemplate="{TemplateBinding AssignmentsTemplate}" ToolTipTemplate="{TemplateBinding ToolTipTemplate}"
                                                  BarHeight="{TemplateBinding BarHeight}" CompletedBarHeight="{TemplateBinding CompletedBarHeight}" IsVirtualizing="{TemplateBinding IsVirtualizing}"
                                                  local:ScheduleChartView.AreAssignmentsReadOnly="{TemplateBinding AreAssignmentsReadOnly}"
                                                  IsAsyncPresentationEnabled="{TemplateBinding IsAsyncPresentationEnabled}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="local:LoadChartView" BasedOn="{StaticResource {x:Type local:ScheduleChartView}}">
        <Setter Property="NormalAllocationBarFill" Value="Blue"/>
        <Setter Property="UnderAllocationBarFill" Value="Blue"/>
        <Setter Property="OverAllocationBarFill" Value="Red"/>
        <Setter Property="StandardTaskTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="{Binding ComputedBarMargin}"/>
                            <RowDefinition Height="{Binding ComputedBarWeight}"/>
                        </Grid.RowDefinitions>
                        <Rectangle Grid.Row="1" Fill="{Binding ComputedBarFill}" Stroke="{Binding ComputedBarStroke}" StrokeThickness="{Binding LoadChartView.AllocationBarStrokeThickness}"/>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="local:LoadChartDataGrid" BasedOn="{StaticResource {x:Type local:ScheduleChartDataGrid}}">
        <Setter Property="NormalAllocationBarFill" Value="Blue"/>
        <Setter Property="UnderAllocationBarFill" Value="Blue"/>
        <Setter Property="OverAllocationBarFill" Value="Red"/>
        <Setter Property="StandardTaskTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="{Binding ComputedBarMargin}"/>
                            <RowDefinition Height="{Binding ComputedBarWeight}"/>
                        </Grid.RowDefinitions>
                        <Rectangle Grid.Row="1" Fill="{Binding ComputedBarFill}" Stroke="{Binding ComputedBarStroke}" StrokeThickness="{Binding LoadChartView.AllocationBarStrokeThickness}"/>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:LoadChartDataGrid">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="{Binding DataGridWidth, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" MinWidth="{TemplateBinding MinDataGridWidth}" MaxWidth="{TemplateBinding MaxDataGridWidth}"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="{Binding ChartWidth, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" MinWidth="{TemplateBinding MinChartWidth}" MaxWidth="{TemplateBinding MaxChartWidth}"/>
                            </Grid.ColumnDefinitions>
                            <hd:DataTreeGrid x:Name="DataTreeGrid" Grid.Column="0" HorizontalScrollBarVisibility="Visible" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" BorderThickness="0" Foreground="{TemplateBinding Foreground}" Background="Transparent" RowBackground="{TemplateBinding RowBackground}" AlternatingRowBackground="{TemplateBinding AlternatingRowBackground}" GridLinesVisibility="{TemplateBinding GridLinesVisibility}"
                                             AlternationCount="{TemplateBinding AlternationCount}" CellStyle="{TemplateBinding CellStyle}" ClipboardCopyMode="{TemplateBinding ClipboardCopyMode}" ColumnHeaderStyle="{TemplateBinding ColumnHeaderStyle}" ColumnWidth="{TemplateBinding ColumnWidth}" FrozenColumnCount="{TemplateBinding FrozenColumnCount}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalGridLinesBrush="{TemplateBinding HorizontalGridLinesBrush}" VerticalGridLinesBrush="{TemplateBinding VerticalGridLinesBrush}" IsTextSearchEnabled="{TemplateBinding IsTextSearchEnabled}" IsTextSearchCaseSensitive="{TemplateBinding IsTextSearchCaseSensitive}" MaxColumnWidth="{TemplateBinding MaxColumnWidth}" MinColumnWidth="{TemplateBinding MinColumnWidth}" RowStyle="{TemplateBinding RowStyle}" RowStyleSelector="{TemplateBinding RowStyleSelector}" RowValidationErrorTemplate="{Binding RowValidationErrorTemplate}" SelectionMode="{TemplateBinding SelectionMode}" SelectedValuePath="{TemplateBinding SelectedValuePath}"
                                             ColumnHeaderHeight="{TemplateBinding HeaderHeight}" RowHeight="{TemplateBinding ItemHeight}"
                                             ExpanderTemplate="{TemplateBinding ExpanderTemplate}" IndentationUnitSize="{TemplateBinding IndentationUnitSize}"
                                             IsReadOnly="{TemplateBinding IsReadOnly}"
                                             IsAsyncPresentationEnabled="False"/>
                            <GridSplitter Grid.Column="1" HorizontalAlignment="Center" Width="{TemplateBinding SplitterWidth}" IsEnabled="{TemplateBinding IsSplitterEnabled}" Background="{TemplateBinding SplitterBackground}" BorderBrush="{TemplateBinding SplitterBorderBrush}" BorderThickness="{TemplateBinding SplitterBorderThickness}"/>
                            <local:GanttChartView x:Name="GanttChartView" Grid.Column="2" Foreground="{TemplateBinding Foreground}" Background="Transparent" BorderBrush="Transparent" BorderThickness="0" ItemTemplate="{TemplateBinding ItemTemplate}" ItemsPanel="{TemplateBinding ItemsPanel}" ScrollViewer.CanContentScroll="False"
                                                  AlternationCount="{TemplateBinding AlternationCount}" IsTextSearchEnabled="{TemplateBinding IsTextSearchEnabled}" IsTextSearchCaseSensitive="{TemplateBinding IsTextSearchCaseSensitive}"
                                                  HeaderHeight="{TemplateBinding HeaderHeight}" ScaleHeaderHeight="{TemplateBinding ScaleHeaderHeight}" ItemHeight="{TemplateBinding ItemHeight}" AreIndividualItemHeightsApplied="{TemplateBinding AreIndividualItemHeightsApplied}" AreIndividualItemAppearanceSettingsApplied="{TemplateBinding AreIndividualItemAppearanceSettingsApplied}" TimelinePageStart="{TemplateBinding TimelinePageStart}" TimelinePageFinish="{TemplateBinding TimelinePageFinish}" VisibleWeekStart="{TemplateBinding VisibleWeekStart}" VisibleWeekFinish="{TemplateBinding VisibleWeekFinish}" VisibleDayStart="{TemplateBinding VisibleDayStart}" VisibleDayFinish="{TemplateBinding VisibleDayFinish}" WorkingWeekStart="{TemplateBinding WorkingWeekStart}" WorkingWeekFinish="{TemplateBinding WorkingWeekFinish}" WorkingDayStart="{TemplateBinding WorkingDayStart}" WorkingDayFinish="{TemplateBinding WorkingDayFinish}" NonworkingIntervals="{TemplateBinding NonworkingIntervals}" NonworkingDayIntervalProvider="{TemplateBinding NonworkingDayIntervalProvider}" HourWidth="{TemplateBinding HourWidth}" Scales="{TemplateBinding Scales}"
                                                  IsFittingToTimelinePageEnabled="{TemplateBinding IsFittingToTimelinePageEnabled}" IsFittingToTimelinePageEnabledUpdatingScales="{TemplateBinding IsFittingToTimelinePageEnabledUpdatingScales}" IsFittingToTimelinePageEnabledUpdatingScalesToMinType="{TemplateBinding IsFittingToTimelinePageEnabledUpdatingScalesToMinType}" IsFittingToTimelinePageEnabledUpdatingScalesToMaxType="{TemplateBinding IsFittingToTimelinePageEnabledUpdatingScalesToMaxType}" IsMouseWheelZoomEnabled="{TemplateBinding IsMouseWheelZoomEnabled}" IsMouseWheelZoomEnabledPreservingMousePositionTime="{TemplateBinding IsMouseWheelZoomEnabledPreservingMousePositionTime}" IsMouseWheelZoomEnabledSpeed="{TemplateBinding IsMouseWheelZoomEnabledSpeed}" IsMouseWheelZoomEnabledMinHourWidth="{TemplateBinding IsMouseWheelZoomEnabledMinHourWidth}" IsMouseWheelZoomEnabledMaxHourWidth="{TemplateBinding IsMouseWheelZoomEnabledMaxHourWidth}" IsMouseWheelZoomEnabledUpdatingScales="{TemplateBinding IsMouseWheelZoomEnabledUpdatingScales}" IsMouseWheelZoomEnabledUpdatingScalesToMinType="{TemplateBinding IsMouseWheelZoomEnabledUpdatingScalesToMinType}" IsMouseWheelZoomEnabledUpdatingScalesToMaxType="{TemplateBinding IsMouseWheelZoomEnabledUpdatingScalesToMaxType}" IsMouseWheelZoomEnabledUpdatingTimelinePage="{TemplateBinding IsMouseWheelZoomEnabledUpdatingTimelinePage}"
                                                  IsTaskToolTipVisible="{TemplateBinding IsTaskToolTipVisible}" IsNonworkingTimeHighlighted="{TemplateBinding IsNonworkingTimeHighlighted}" IsCurrentTimeLineVisible="{TemplateBinding IsCurrentTimeLineVisible}" CurrentTimeLineUpdateInterval="{TemplateBinding CurrentTimeLineUpdateInterval}" AreUpdateTimelinePageButtonsVisible="{TemplateBinding AreUpdateTimelinePageButtonsVisible}" UpdateTimelinePageAmount="{TemplateBinding UpdateTimelinePageAmount}" DependencyCreationValidator="{x:Null}"
                                                  HeaderBackground="{TemplateBinding HeaderBackground}" WorkingTimeBackground="{TemplateBinding WorkingTimeBackground}" NonworkingTimeBackground="{TemplateBinding NonworkingTimeBackground}" CurrentTimeLineStroke="{TemplateBinding CurrentTimeLineStroke}" ItemSeparatorLinesStroke="{TemplateBinding ItemSeparatorLinesStroke}" AlternatingItemBackground="{TemplateBinding AlternatingItemBackground}" IsAlternatingItemBackgroundInverted="{TemplateBinding IsAlternatingItemBackgroundInverted}" IsIndividualItemNonworkingTimeHighlighted="{TemplateBinding IsIndividualItemNonworkingTimeHighlighted}"
                                                  StandardTaskTemplate="{TemplateBinding StandardTaskTemplate}"
                                                  MilestoneBarFill="{TemplateBinding MilestoneBarFill}" MilestoneBarStroke="{TemplateBinding MilestoneBarStroke}" MilestoneBarStrokeThickness="{TemplateBinding MilestoneBarStrokeThickness}" MilestoneTaskTemplate="{TemplateBinding MilestoneTaskTemplate}"
                                                  ToolTipTemplate="{TemplateBinding ToolTipTemplate}"
                                                  BarHeight="{TemplateBinding BarHeight}" IsVirtualizing="{TemplateBinding IsVirtualizing}"
                                                  IsAsyncPresentationEnabled="{TemplateBinding IsAsyncPresentationEnabled}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="AvailableAssignmentItemTemplate">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <CheckBox Grid.Column="0" IsChecked="{Binding IsSelected, Mode=TwoWay}" Margin="0,0,2,0" VerticalAlignment="Center"/>
            <ContentControl Grid.Column="1" Content="{Binding Content}" ContentTemplate="{Binding ContentTemplate}" VerticalAlignment="Center" IsHitTestVisible="False"/>
            <TextBox Grid.Column="2" Text="{Binding AllocationUnits, Converter={StaticResource NumberStringConverter}, ConverterParameter=0.##%, Mode=TwoWay}" Width="50" TextAlignment="Right" IsHitTestVisible="{Binding IsSelected}" Visibility="{Binding AllocationUnitsVisibility}" Opacity="{Binding AllocationUnitsPercentOpacity}" Margin="3,1,1,1" Padding="0" BorderThickness="0" VerticalAlignment="Center"/>
        </Grid>
    </DataTemplate>
    <Style x:Key="BaseAssignmentSelectorStyle" TargetType="ItemsControl">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource AvailableAssignmentItemTemplate}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="local:AssignmentListBox" BasedOn="{StaticResource BaseAssignmentSelectorStyle}">
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ListBoxItem">
                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="SelectionMode" Value="Extended"/>
    </Style>
    <Style TargetType="local:AssignmentComboBox" BasedOn="{StaticResource BaseAssignmentSelectorStyle}">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <ContentPresenter Name="StandardLayout" Content="{Binding}" ContentTemplate="{StaticResource AvailableAssignmentItemTemplate}"/>
                        <ContentPresenter Name="SelectionLayout" Content="{Binding SelectedContent, RelativeSource={RelativeSource AncestorType=local:AssignmentComboBox}}" Visibility="Collapsed"/>
                    </Grid>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=ComboBoxItem}}" Value="{x:Null}">
                            <Setter TargetName="StandardLayout" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="SelectionLayout" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ComboBoxItem">
                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Presenters -->
    <DataTemplate x:Key="TaskPresenterContentDataTemplate">
        <Grid Visibility="{Binding Visibility}" Height="{Binding GanttChartView.ItemHeight}">
            <ItemsControl ItemsSource="{Binding Predecessors}" Height="0" HorizontalAlignment="Left" VerticalAlignment="Center" IsTabStop="False" Visibility="{Binding GanttChartView.TaskDependenciesVisibility}">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <Grid IsItemsHost="True"/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <local:DependencyLinePresenter Visibility="{Binding ComputedDependencyLineVisibility}"/>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="-4,0,0,0">
                <ToolTipService.ToolTip>
                    <ToolTip Content="{Binding}" ContentTemplate="{Binding GanttChartView.ToolTipTemplate}" Visibility="{Binding GanttChartView.TaskToolTipVisibility}"/>
                </ToolTipService.ToolTip>
                <Grid Width="4">
                    <Grid Visibility="{Binding GanttChartView.ThumbVisibility}">
                        <Grid Visibility="{Binding GanttChartView.StartDependencyThumbVisibility}">
                            <local:DragDependencyThumb RoleParameter="Start" Height="{Binding ComputedBarHeight}" VerticalAlignment="Center" Visibility="{Binding GanttChartView.DependencyCreationThumbVisibility}"/>
                        </Grid>
                    </Grid>
                </Grid>
                <Grid Width="{Binding ComputedBarWidth}" Height="{Binding ComputedBarHeight}" VerticalAlignment="Center">
                    <ContentControl Content="{Binding}" ContentTemplate="{Binding ComputedTaskTemplate}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" IsTabStop="False"/>
                </Grid>
                <Grid Width="4">
                    <Grid Visibility="{Binding GanttChartView.ThumbVisibility}">
                        <local:DragDependencyThumb Height="{Binding ComputedBarHeight}" VerticalAlignment="Center" Visibility="{Binding GanttChartView.DependencyCreationThumbVisibility}"/>
                    </Grid>
                </Grid>
                <ContentControl Content="{Binding}" ContentTemplate="{Binding GanttChartView.AssignmentsTemplate}" Margin="3,0" VerticalAlignment="Center" IsTabStop="False"/>
            </StackPanel>
        </Grid>
    </DataTemplate>
    <Style TargetType="local:TaskPresenter">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:TaskPresenter">
                    <ContentControl x:Name="ContentControl" Content="{Binding}" Visibility="Collapsed" IsTabStop="False"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="local:DependencyLinePresenter">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:DependencyLinePresenter">
                    <ContentControl x:Name="ContentControl" Content="{Binding}" ContentTemplate="{Binding GanttChartView.DependencyLineTemplate}" IsTabStop="False">
                        <ContentControl.ContextMenu>
                            <ContextMenu>
                                <MenuItem x:Name="DeleteContextMenuItem" Header="{Binding GanttChartView.DependencyDeletionContextMenuItemHeader}"/>
                            </ContextMenu>
                        </ContentControl.ContextMenu>
                    </ContentControl>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Thumbs -->
    <ControlTemplate x:Key="UpdateIndexThumbTemplate" TargetType="Thumb">
        <Grid>
            <Border Width="12" Height="12" Background="Transparent"/>
            <Canvas x:Name="IndicatorCanvas">
                <Canvas Canvas.Top="{TemplateBinding Tag}">
                    <Line X1="-32000" X2="32000" Y1="0.5" Y2="{Binding Y1, RelativeSource={RelativeSource Self}}" Stroke="Silver" StrokeThickness="1" StrokeDashArray="2,2"/>
                </Canvas>
            </Canvas>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="Tag" Value="{x:Null}">
                <Setter TargetName="IndicatorCanvas" Property="Visibility" Value="Collapsed"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="local:DragTaskThumb">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:DragTaskThumb">
                    <Thumb x:Name="Thumb" Cursor="Hand">
                        <Thumb.Template>
                            <ControlTemplate TargetType="Thumb">
                                <Rectangle Fill="Transparent"/>
                            </ControlTemplate>
                        </Thumb.Template>
                    </Thumb>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="local:DragDependencyThumb">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:DragDependencyThumb">
                    <Grid x:Name="Root">
                        <Thumb x:Name="Thumb" Cursor="Pen" Width="4">
                            <Thumb.Template>
                                <ControlTemplate TargetType="Thumb">
                                    <Grid>
                                        <Rectangle Fill="Transparent"/>
                                    </Grid>
                                </ControlTemplate>
                            </Thumb.Template>
                        </Thumb>
                        <Grid x:Name="IndicatorRoot" Width="4" Height="4">
                            <Ellipse x:Name="HoveringIndicator" Fill="{Binding Path=(local:GanttChartView.DependencyLineStroke)}" Visibility="Collapsed" IsHitTestVisible="False"/>
                            <Ellipse x:Name="Indicator" Fill="{Binding Path=(local:GanttChartView.DependencyLineStroke)}" Visibility="Collapsed"/>
                        </Grid>
                        <Canvas IsHitTestVisible="False">
                            <shapes:ArrowLine x:Name="Line" Stroke="{Binding Path=(local:GanttChartView.DependencyLineStroke)}" StrokeThickness="{Binding GanttChartView.DependencyLineStrokeThickness}" StrokeDashArray="2,2" Visibility="Collapsed"/>
                            <shapes:ArrowLine x:Name="AcceptedLine" Stroke="{Binding Path=(local:GanttChartView.DependencyLineStroke)}" StrokeThickness="{Binding GanttChartView.DependencyLineStrokeThickness}" Visibility="Collapsed"/>
                        </Canvas>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="local:DragAssignmentThumb">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:DragAssignmentThumb">
                    <Grid x:Name="Root">
                        <Thumb x:Name="Thumb" Cursor="Hand" Margin="0,-4,0,0" Height="8" VerticalAlignment="Bottom">
                            <Thumb.Template>
                                <ControlTemplate TargetType="Thumb">
                                    <Grid>
                                        <Rectangle Fill="Transparent"/>
                                    </Grid>
                                </ControlTemplate>
                            </Thumb.Template>
                        </Thumb>
                        <Grid x:Name="IndicatorRoot" VerticalAlignment="Bottom" Margin="2,0">
                            <Line x:Name="HoveringIndicator" X1="0" Y1="0" X2="{Binding ComputedBarWidth}" Y2="0" Stroke="{Binding Path=(local:GanttChartView.StandardBarStroke)}" StrokeDashArray="2,2" Visibility="Collapsed" IsHitTestVisible="False"/>
                            <Line x:Name="Indicator" X1="0" Y1="0" X2="{Binding ComputedBarWidth}" Y2="0" Stroke="{Binding Path=(local:GanttChartView.StandardBarStroke)}" StrokeDashArray="2,2" Visibility="Collapsed"/>
                        </Grid>
                        <Canvas IsHitTestVisible="False" VerticalAlignment="Top">
                            <Rectangle x:Name="Rectangle" Width="{Binding ComputedBarWidth}" Height="{Binding ComputedBarHeight}" Stroke="{Binding Path=(local:GanttChartView.StandardBarStroke)}" StrokeDashArray="2,2" RadiusX="{Binding GanttChartView.StandardBarCornerRadius}" RadiusY="{Binding GanttChartView.StandardBarCornerRadius}" Visibility="Collapsed"/>
                            <Rectangle x:Name="AcceptedRectangle" Width="{Binding ComputedBarWidth}" Height="{Binding ComputedBarHeight}" Stroke="{Binding Path=(local:GanttChartView.StandardBarStroke)}" RadiusX="{Binding GanttChartView.StandardBarCornerRadius}" RadiusY="{Binding GanttChartView.StandardBarCornerRadius}" Visibility="Collapsed"/>
                        </Canvas>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Shapes -->
    <Style TargetType="shapes:ArrowLine">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="shapes:ArrowLine">
                    <Canvas>
                        <Line x:Name="StartCapLine">
                            <Line.RenderTransform>
                                <RotateTransform x:Name="StartRotateTransform"/>
                            </Line.RenderTransform>
                        </Line>
                        <Line x:Name="Line"/>
                        <Line x:Name="EndCapLine">
                            <Line.RenderTransform>
                                <RotateTransform x:Name="EndRotateTransform"/>
                            </Line.RenderTransform>
                        </Line>
                    </Canvas>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="shapes:DependencyArrowLine">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="shapes:DependencyArrowLine">
                    <ItemsControl x:Name="LineItemsControl" IsTabStop="False">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <Grid IsItemsHost="True"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <shapes:ArrowLine X1="{Binding X1}" Y1="{Binding Y1}" X2="{Binding X2}" Y2="{Binding Y2}" Stroke="{Binding Parent.Stroke}" StrokeThickness="{Binding Parent.StrokeThickness}" ArrowSize="{Binding Parent.ArrowSize}" StartCap="{Binding StartCap}" EndCap="{Binding EndCap}"/>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>